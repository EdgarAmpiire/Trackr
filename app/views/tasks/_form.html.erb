<%= form_with(model: task, class: "space-y-6") do |form| %>
  <% if task.errors.any? %>
    <div class="bg-red-100 text-red-800 p-4 rounded-lg border border-red-200">
      <h2 class="font-semibold mb-2">
        <%= pluralize(task.errors.count, "error") %> prohibited this task from being saved:
      </h2>
      <ul class="list-disc list-inside text-sm">
        <% task.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <!-- Title -->
  <div>
    <%= form.label :title, class: "block font-semibold mb-2 text-gray-700" %>
    <%= form.text_field :title,
        class: "w-full border border-gray-300 rounded-xl p-3 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200 shadow-sm" %>
  </div>

  <!-- Description -->
  <div>
    <%= form.label :description, class: "block font-semibold mb-2 text-gray-700" %>
    <%= form.text_area :description,
        class: "w-full border border-gray-300 rounded-xl p-3 h-32 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200 shadow-sm" %>
  </div>

<!-- Operators Section -->
<div>
  <h3 class="font-semibold text-gray-700 mb-2">Operators</h3>

  <!-- Existing operators (from DB) -->
  <%= form.fields_for :operators do |operator_fields| %>
  <div class="flex items-center gap-3 mb-2 operator-field">
    <!-- Operator name -->
    <%= operator_fields.text_field :name,
        placeholder: "Operator name",
        class: "flex-1 border border-gray-300 rounded-xl p-2 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200 shadow-sm" %>

    <!-- Operator role dropdown -->
    <%= operator_fields.select :role,
        options_for_select(["Photographer", "Videographer", "Editor", "Producer", "Assistant"], operator_fields.object.role),
        { prompt: "Select role" },
        class: "border border-gray-300 rounded-xl p-2 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200 shadow-sm" %>

    <!-- Remove button -->
    <%= operator_fields.hidden_field :_destroy, class: "destroy-flag" %>
    <%= link_to "Remove", "#", class: "text-red-600 text-sm hover:underline remove-operator" %>
  </div>
<% end %>



  <!-- Dropdown for selecting from predefined operators -->
  <div class="flex items-center gap-3 mb-2">
    <%= select_tag "operator_select",
        options_for_select(@all_operators),
        prompt: "Select operator",
        class: "border border-gray-300 rounded-xl p-2 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200 shadow-sm" %>
    <button type="button" id="add-operator-dropdown"
      class="bg-green-100 text-green-700 px-4 py-2 rounded-lg hover:bg-green-200 font-medium transition-all duration-200 shadow-sm">
      Add
    </button>
  </div>

  <!-- Optional new operator manually -->
  <div class="flex items-center gap-3 mb-2">
    <input type="text" id="new-operator" placeholder="Enter new operator"
      class="w-full border border-gray-300 rounded-xl p-2 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200 shadow-sm">
    <button type="button" id="add-operator-new"
      class="bg-green-100 text-green-700 px-4 py-2 rounded-lg hover:bg-green-200 font-medium transition-all duration-200 shadow-sm">
      Add
    </button>
  </div>
</div>


    <!-- Submit & Cancel -->
  <div class="flex gap-3">
    <%= form.submit task.persisted? ? "Update Task" : "Create Task",
      class: "cursor-pointer bg-green-600 text-white px-5 py-2 rounded-xl font-semibold hover:bg-green-700 transition-all duration-200 shadow-md" %>

    <%= link_to (task.persisted? ? task_path(task) : tasks_path),
        class: "bg-gray-200 text-gray-700 px-5 py-2 rounded-xl font-semibold hover:bg-gray-300 transition-all duration-200 shadow-md flex items-center justify-center", data: { turbo: false } do %>
      Cancel
    <% end %>
  </div>

<% end %>

<!-- Stimulus/JS helper for dynamically adding operator fields -->
<script>
document.addEventListener("turbo:load", () => {
  const operatorContainer = document.querySelector("#operators-container") || document.createElement("div");

  // ✅ Add from dropdown (REPLACE this whole section)
  document.getElementById("add-operator-dropdown")?.addEventListener("click", () => {
    const select = document.getElementById("operator_select");
    const value = select.value;
    if (!value) return;

    const index = Date.now();
    const newField = document.createElement("div");
    newField.classList.add("flex", "items-center", "gap-3", "mb-2", "operator-field");
    newField.innerHTML = `
      <input type="text" name="task[operators_attributes][${index}][name]" value="${value}" readonly
             class="flex-1 border border-gray-300 rounded-xl p-2 bg-gray-100">

      <select name="task[operators_attributes][${index}][role]"
              class="border border-gray-300 rounded-xl p-2 focus:ring-2 focus:ring-green-500 focus:border-green-500">
        <option value="">Select role</option>
        <option>Photographer</option>
        <option>Videographer</option>
        <option>Editor</option>
        <option>Producer</option>
        <option>Assistant</option>
      </select>

      <a href="#" class="text-red-600 text-sm hover:underline remove-operator">Remove</a>
    `;
    select.closest("div").before(newField);
  });

  // ✅ Add from manual input (REPLACE this whole section)
  document.getElementById("add-operator-new")?.addEventListener("click", () => {
    const input = document.getElementById("new-operator");
    const value = input.value.trim();
    if (!value) return;

    const index = Date.now();
    const newField = document.createElement("div");
    newField.classList.add("flex", "items-center", "gap-3", "mb-2", "operator-field");
    newField.innerHTML = `
      <input type="text" name="task[operators_attributes][${index}][name]" value="${value}"
             class="flex-1 border border-gray-300 rounded-xl p-2 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200 shadow-sm">

      <select name="task[operators_attributes][${index}][role]"
              class="border border-gray-300 rounded-xl p-2 focus:ring-2 focus:ring-green-500 focus:border-green-500">
        <option value="">Select role</option>
        <option>Photographer</option>
        <option>Videographer</option>
        <option>Editor</option>
        <option>Producer</option>
        <option>Assistant</option>
      </select>

      <a href="#" class="text-red-600 text-sm hover:underline remove-operator">Remove</a>
    `;
    input.closest("div").before(newField);
    input.value = "";
  });

  // ✅ Remove operator (keep this part, just ensure `.operator-field` class exists)
  document.addEventListener("click", (e) => {
    if (e.target.classList.contains("remove-operator")) {
      e.preventDefault();
      const operatorField = e.target.closest(".operator-field");
      const destroyInput = operatorField?.querySelector(".destroy-flag");

      if (destroyInput) {
        destroyInput.value = "1";
        operatorField.style.display = "none"; // hide but keep for Rails
      } else {
        operatorField.remove(); // remove unsaved ones
      }
    }
  });
});
</script>
